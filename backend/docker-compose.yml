services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: recruitment-backend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://admin:admin@postgres:5432/postgresdb
      JWT_SECRET: dev-jwt-secret-change-in-production
      SMTP_HOST: smtp.gmail.com
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      FRONTEND_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["dumb-init", "--", "/nodejs/bin/node", "--inspect=0.0.0.0:9229", "dist/index.js"]
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    container_name: recruitment-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: postgresdb
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_vol:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d postgresdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: recruitment-redis-dev
    restart: unless-stopped
    command: redis-server --maxmemory 64mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_vol:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - app-network

volumes:
  postgres_vol:
    driver: local
  redis_vol:
    driver: local

networks:
  app-network:
    driver: bridge
